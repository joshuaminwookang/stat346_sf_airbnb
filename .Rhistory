-122.518540 <= lon & lon <= -122.355982,
37.707659 <= lat & lat <=  37.81
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))
library("dplyr")
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-122.518540 <= lon & lon <= -122.355982,
37.707659 <= lat & lat <=  37.81
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-122.518540 <= lon & lon <= -122.355982,
37.707659 <= lat & lat <=  37.81
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-background", color = I("red"))
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap")
ls
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-background", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-122.518540 <= lon & lon <= -122.355982,
37.707659 <= lat & lat <=  37.81
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
sf <- c(left = -122.518540, bottom =  37.707659, right =  -122.355982, top = 37.81)
get_stamenmap(sf, zoom = 5, maptype = "toner") %>% ggmap()
get_stamenmap(sf, zoom = 5, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 1, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 2, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 10, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 8, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 15, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 12, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 13, maptype = "toner-lite") %>% ggmap()
get_stamenmap(sf, zoom = 14, maptype = "toner-lite") %>% ggmap()
qmplot(lon, lat, data = listings,  maptype = "toner-lite", color = I("red"))
#### Initial Setup
# read in dataset
setwd(".")
listings <- read.csv("listings.csv")
dim(listings)
# choose subset with variables of interest
listings <- subset(listings, select=c("price", "host_response_rate", "host_is_superhost", "neighbourhood",
"latitude", "longitude", "property_type", "room_type", "accommodates",
"bathrooms", "bedrooms", "number_of_reviews", "review_scores_rating"))
# organize into variables for later ease
listings$price <- as.numeric(gsub("[$]", "", listings$price))
listings$host_response_rate <- as.numeric(gsub("[%]", "", listings$host_response_rate))
# clean of invalid observations
listings <- listings[complete.cases(listings), ]
dim(listings)
listings$price[3074] <- 1 # fix 0 price entry for log(price) transformation
#### Exploratory Data Analysis
# quantitative variables in dataset: price, host response rate, latitude, longitude, accommodates, bathrooms, bedrooms, number of reviews, review_scores_rating
listings_quant <- subset(listings, select=c("price", "host_response_rate", "latitude", "longitude", "accommodates",
"bathrooms", "bedrooms", "number_of_reviews", "review_scores_rating"))
# categorical variables in dataset: host is superhost, neighborhood, property type, room type
listings_cat <- subset(listings, select=c("host_is_superhost", "neighbourhood", "property_type", "room_type"))
## Univariate EDA
# statistical display of quantitative variables
l_mean <- apply(listings_quant, 2, mean)
l_sd <- apply(listings_quant, 2, sd)
l_med <- apply(listings_quant, 2, median)
l_iqr <- apply(listings_quant, 2, IQR, na.rm=T)
l_min <- apply(listings_quant, 2, min)
l_max <- apply(listings_quant, 2, max)
statsum <- data.frame(l_mean, l_sd, l_med, l_iqr, l_min, l_max)
rownames(statsum) <- c('Price ($)', 'Host Response Rate (%)', 'Latitude', 'Longitude', 'Number of People Accommodated', 'Number of Bathrooms', 'Number of Bedrooms', 'Number of Reviews', 'Overall Rating')
colnames(statsum) <- c("Mean", "Standard Deviation", "Median", "IQR", "Minimum", "Maximum")
qmplot(lon, lat, data = listings,  maptype = "toner-lite", color = I("red"))
qmplot(lon, lat, data = listings$latitude,  maptype = "toner-lite", color = I("red"))
lon
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-background", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))  %>% ggmap()
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))
#  Using zoom = 14...
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
library("dplyr")
#
#  Attaching package: 'dplyr'
#  The following objects are masked from 'package:stats':
#
#      filter, lag
#  The following objects are masked from 'package:base':
#
#      intersect, setdiff, setequal, union
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-95.39681 <= lon & lon <= -95.34188,
29.73631 <= lat & lat <=  29.78400
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
robberies <- violent_crimes %>% filter(offense == "robbery")
qmplot(lon, lat, data = violent_crimes, geom = "blank",
zoom = 14, maptype = "toner-background", darken = .7, legend = "topleft"
) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
#  Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under ODbL.
violent_crimes
colname(violent_crimes)
ncol(violent_crimes)
lon
violent_crimes$lon
qmplot(longitude, latatitude, data = listings, maptype = "toner-lite", color = I("red"))
listings
typeof(crimes)
typeof(crime)
typeof(listings)
dim(listings)
dim(crime)
dim(violent_crimes)
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
qmplot(lon, lat, data = violent_crimes, maptype = "toner-lite", color = I("red"))
?qmplot
?qmplot
qmplot(lon, lat, data = violent_crimes,source="stamen", maptype = "toner-lite", color = I("red"))
qmplot(lon, lat, data = violent_crimes,source="stamen", maptype = "toner-lite", color = I("red"),mapcolor = "bw")
qmplot(lon, lat, data = crime)
theme_set(theme_bw())
qmplot(lon, lat, data = violent_crimes, colour = offense,
size = I(3.5), alpha = I(.6), legend = "topleft")
qmplot(lon, lat, data = crime)
qmplot(lon, lat, data = crime,color="bw")
qmplot(longitude, latitude, data=listings)
qmplot(longitude, latitude, data=listings, mapcolor = "bw")
qmplot(longitude, latitude, source="stamen", data=listings, mapcolor = "bw")
library("dplyr")
library("forcats")
# define helper
`%notin%` <- function(lhs, rhs) !(lhs %in% rhs)
# reduce crime to violent crimes in downtown houston
violent_crimes <- crime %>%
filter(
offense %notin% c("auto theft", "theft", "burglary"),
-122.518540 <= lon & lon <= -122.355982,
37.707659 <= lat & lat <=  37.81
) %>%
mutate(
offense = fct_drop(offense),
offense = fct_relevel(offense, c("robbery", "aggravated assault", "rape", "murder"))
)
# use qmplot to make a scatterplot on a map
qmplot(lon, lat, data = violent_crimes, maptype = "toner", color = I("red"))
qmplot(longitude, latitude, geom="blank", data=listings, mapcolor = "bw")
qmplot(longitude, latitude, geom="circle", maptype = "toner-background", data=listings, mapcolor = "bw")
qmplot(longitude, latitude, geom="density2d", maptype = "toner-background", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom="density", maptype = "toner-background", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom="point", maptype = "toner-background", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom="tile", maptype = "toner-background", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom = c("point","density2d"), maptype = "toner-background", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom = c("point","density2d"), maptype = "toner", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom = "blank ,  maptype = "toner-background", data=listings, mapcolor = "bw", color = I("red"))
qmplot(longitude, latitude, geom = c("point","density2d"), maptype = "toner", data=listings, mapcolor = "bw", color = I("red"),source="stamen")
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = Longitude, y = Latitude), color = "navy", size = 1)
ggmap(get_stamenmap(sf, zoom = 12, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = Longitude, y = Latitude), color = "navy", size = 1)
ggmap(get_stamenmap(sf, zoom = 12, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "navy", size = 1)
ggmap(get_stamenmap(sf, zoom = 12, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "navy", size = 0.1)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite")) +
+     geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)
library("ggmap")
library("dplyr")
library("forcats")
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite"))
+ geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)
unique(listings$longitude)
library("ggmap")
library("dplyr")
library("forcats")
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = property_type, size = 0.1)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = listings$property_type, size = 0.1)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)+
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite"), darken = .7, legend = "topleft") +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)+
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner-lite"), darken = .7, legend = "topleft") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "watercolour"), darken = .7, legend = "topleft") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "terrain"), darken = .7, legend = "topleft") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
a <- listings %>% filter(neigh_CT == 1)
a <- listings %>% filter(listings$neigh_CT == 1)
a <- listings %>% filter(neighborhood == "SoMA")
a <- listings %>% filter(neighbourhood == "SoMA")
ggmap(get_stamenmap(sf, zoom = 14, maptype = "terrain"), darken = .7, legend = "topleft") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 650)
listings$host_is_superhost
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner"), legend = "right") +
facet_wrap(~ host_is_superhost)
ggmap(get_stamenmap(sf, zoom = 14, maptype = "toner"), legend = "right") +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)+
facet_wrap(~ host_is_superhost)
min(listings$latitude)
sf
min(listings$longitude)
max(listings$longitude)
max(listings$latitude)
library("ggmap")
library("dplyr")
library("forcats")
sf <- c(left = -122.52, bottom = 25.75, right = -122.4, top = 37.82)
ggmap(get_stamenmap(sf, zoom = 37.69, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)
library("ggmap")
library("dplyr")
library("forcats")
sf <- c(left = -122.52, bottom = 25.75, right = -122.4, top = 37.82)
ggmap(get_stamenmap(sf, zoom = 12, maptype = "toner-lite")) +
geom_point(data = listings, aes(x = longitude, y = latitude), color = "red", size = 0.1)
